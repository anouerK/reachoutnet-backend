# extend schema @link(url: "https://specs.apollo.dev/federation/v2.0", import: ["@key"])
# @key(fields: "id")

type User  {
    id: ID!
    username: String!
    first_name: String!
    last_name: String!
    birthdate: String
    country: String
    email: String!
    permissions: Int!
    creation_date: String!
    last_login: String
    is_verified: Boolean!
    has_otp:Boolean!
    skills: [Skill]
    profile_picture: String
    profile_cover_picture: String
    activationCode: String!
    banned: Boolean
  
  }
  type User_O  {
    _id: ID!
    username: String!
    first_name: String!
    last_name: String!
    birthdate: String
    country: String
    email: String!
    permissions: Int!
    creation_date: String!
    last_login: String
    is_verified: Boolean!
    has_otp:Boolean!
    skills: [Skill]
    profile_picture: String
    profile_cover_picture: String
    activationCode: String!
  }
input PostInput {
  title: String!
  content: String!
  attachments: [String]
  tags: [String]
  author: ID
  authorType: String
  viewers: [ID]
  comments: [CommentInput]
}
type Like {
  id: ID!
  author: Author!
  createdAt: String!
}

type Comment {
  id: ID!
  content: String!
  author: Author!
  createdAt: String!
  likes: [Like!]
}

input CommentInput {
  content: String!
  author: ID!
  authorType: String!
  likes: [LikeInput]
}

input LikeInput {
  author: ID!
  authorType: String!
}
type Author {
  id: ID!
  type: String!
  user: User
  association: Association
}
type Messager {
  id: ID!
  type: String!
  user: User_O
  association: Association

}
type Message {
  _id: ID!
  sender: Messager!
  receiver: Messager!
  content: String!
  createdAt: String!
}
type Post {
  id: ID!
  title: String!
  content: String!
  attachments: [String]
  tags: [String]
  author: Author!
  viewers: [User!]
  likes: [Like!]
  comments: [Comment!]
  createdAt: String!
  updatedAt: String!
}
type PostViewUser {
  _id: ID!
  title: String!
  content: String!
  attachments: [String]
  tags: [String]
  author: User!
  viewers: [User!]
  likes: [Like!]
  comments: [Comment!]
  createdAt: String!
  updatedAt: String!
}
type MessageViewUser {
  _id: ID
  content: String
  sender: User
  receiver: User
  createdAt: String
}
type PostViewAssociation {
  _id: ID!
  title: String!
  content: String!
  attachments: [String]
  tags: [String]
  author: Association!
  viewers: [User!]
  likes: [Like!]
  comments: [Comment!]
  createdAt: String!
  updatedAt: String!
}
  type Follow {
  id: ID!
  followerId: ID!
  followerType: followTypeEnum!
  followingId: ID!
  followingType: followTypeEnum!
  createdAt: String!
}
type Otp {
    id: ID!
    userId: ID!
    base32: String 
    verified: Boolean!
    last_modified: String!
    enabled: Boolean!
}
  type Event{
    id:ID!
    name: String!
    description: String!
    start_date: String!
    end_date: String!
    location: Location!
    eventImage: String
    attendees: [User]!
    created_by: User!
    last_modified: String!
    requests:[EventRequest]
  }
  type Location{
    address: String!
    x: Float
    y: Float
  }
type EventRequest {
  id: ID!
  state: Int
}


  type Interest{
    id: ID!
    nameInterest: String!
    description: String!  
  }

  type interest {
  id: ID!
  interest: interest!
  level: Int!
  verified: Boolean!
  }
  type interestf{

    type: String
  }

enum followTypeEnum  {
  users 
  associations
}

  type Login {
    user: User
    token: String
  }

  type Skill {
  id: ID!
  skill: skill!
  level: Int!
  verified: Boolean!
  }

  type skill{
    id: ID!
    name: String!
    description: String!

  }
  type generatedOtp {
    base32: String!
    otpauth_url: String!
  }


  type Association {
  id: ID!
  owner: User
  name: String!
  description: String!
  email: String!
  category: String
  Creation_date: String
  updated_at: [String]
  verified: Boolean
  status: Int
  members: [AssociationMember]
  address: Address!
  phone: String!
  img: String
}

type Address {
  street: String!
  city: String!
  country: String!
  zip: String!
}

type AssociationMember {
  id: ID!
  permissions: Int
  user: User

}
type UserRecommendation{
username: String
email: String
first_name: String
last_name: String
country: String
profile_picture: String
id: ID!

}

type statsM{
  result1:[result],
  result2:Int
}

type result{
name:String
months: [usersStat],
}
type usersStat{
  month:String,
  count:Int
}
 
type CategoryStats {
  category: String
  count: Int
}
type resultCategory{
  categoryStats: [CategoryStats]
}

 type ResultFind{
  users:[User],
  associations:[Association]
 }


type authors{
  userr:User,
  associationn:Association,
  comment:String
  createdAt:String
  commentId: ID
}
  type Query {
    postById(Postid:ID!):[authors]!
    messages(id1: ID!,id2: ID!): [MessageViewUser]
    post(id: ID!): Post
    users_posts: [PostViewUser]
    get_user_posts: [PostViewUser]
    get_user_posts_by_id(id: ID!): [PostViewUser]
    # associations_posts: [PostViewAssociation]
    associations: [Association]!
    associations_byowner: [Association]!
    association(id: ID!): Association!
    associationByName(name: String!): [Association]!
    findUser(value: String): ResultFind
    users: [User]!
    usersRecommendation: [UserRecommendation]
    activeusers: Int
    montlyActiveusers: statsM
    newusers: Int
    user(id: ID!): User
    userProfile(id: ID!): User
    me: User
    getUserInfo: User
    follows(id: ID!): String
     followBacks: [User]!
     ThreefollowBacks: [User]!
     following: [User]!
     OnlyFollowedBythisUser: [User]!
     NotFollowing: [User]!
    follow(
      id2: ID!
    ): String!
    findAvailbleSkills: [skill]
    skillId(id: ID!): skill!
    skillName(name : String!): skill!
    skills: [skill]!
    findUserSkills(id: ID!): [Skill]!
    findUserOtp: Otp!
    events: [Event]
    event(id: ID!): Event
    checkRequest(id:ID!):Int!

    GetRequests(id: ID!): [User]!
    userSkills(id: ID!) : userSkill
    
    interestId(id: ID!): Interest!
    nameInterest(name: String!): Interest!
    interests: [Interest]!
    findUserInterests: [String]!
  }

  type userSkill{
    user:User
    findSkills:[skill]
}



  

  input AddressInput {
  street: String!
  city: String!
  country: String!
  zip: String!
}
input UserInput{
  id: String!
}

input AssociationMemberInput {
  id: String!
  permissions: Int
}
input MessageInput {
  sender: ID!
  senderType: String!
  receiver: ID!
  receiverType: String!
  content: String!
}
input LocationInput{
  address: String!
  x: Float
  y: Float
}





type Mutation {
  analyzeCommentGoogle(comment: String!): Boolean
  moderateComment(comment: String!): String
  addComment(postId: ID! , content:String!): Boolean
  deleteCommment(postId: ID!,commentId: ID!): Post
  createMessage(msg: MessageInput!): Message
  userlikepost(postId: ID!): Boolean
  createPost(input: PostInput!): Post
  updatePost(id: ID!, input: PostInput!): Post
  deletePost(id: ID!): Post
  updateUserProfilePicture(picture:String!): User!
  updateUserProfileCoverPicture(picture:String!): User!
  createAssociation(
  name: String!
  description: String!
  email: String!
  members: [UserInput!]
  address: AddressInput!
  phone: String!
  category: String!
  img: String!
):Association!

updateAssociation(
  id: ID!
  name: String!
  description: String!
  email: String!
  members: [UserInput!]
  address: AddressInput!
  phone: String!
):Association!
deleteAssociation(id:ID!):Association!
verifyAssociation(id:ID!):Association!

addMember(
  id:ID!
users: [UserInput!]!
):Association!
removeMember(
associationId:ID!
memberId:ID!
):String

updateMemberPermissions(
  id:ID!
  memberId:ID!
  permissions: Int!
):String




    createEvent(
      name: String!
      description: String!
      start_date: String!
      end_date: String!
      location: LocationInput!
      eventImage:String
      attendees: [ID]
    ): Event!
   
    sendRequest(id:ID!):Event!
    acceptRequest(id:ID! userId:ID!):Event!
    refuseRequest(id:ID! userId:ID!):Event!
    cancelRequest(id:ID!):Event!


    RequestResetPassword(email: String!):Boolean!
    ResetPassword(password: String!,token: String!):Boolean!
    addFollow(
      followingId: ID!
      followingType: String!
    ): Follow!
    unFollow(followingId: ID!): Follow!
    addUser(
      username: String!
      first_name: String!
      last_name: String!
      age: Int!
      email: String!
      password: String!
      permissions: Int
      skills: [SkillInput]
    ): User!
     Signup(
      username: String!
      first_name: String!
      last_name: String!
      birthdate: String!
      country: String!
      email: String!
      password: String!
      skills: [SkillInput]
    ): User!
    updateUser(
      id: ID!
      username: String
      first_name: String
      last_name: String
      age: Int
      email: String
      password: String
      birthdate: String
      country: String
      skills: [SkillInput]
      is_verified: Boolean
      banned: Boolean
      has_otp: Boolean
      permissions: Int
    ): User!

updatePersonal(
      username: String!
      first_name: String!
      last_name: String!
      birthdate: String!
      country: String!
    ): User!

    activate(activationCode:String!): User!
    deleteUser(id: ID!): User!
    login(email: String!, password: String!): Login!
    loginLinkedin(authorization: String!): Login!
    generateOtp:generatedOtp!
    verifyOtp(base32:String!,token:String!): Otp!
    validateOtp(token:String!): Otp!
    disableOtp(id:ID!): User!
    deleteOtp(id:ID!): User!

    sendEmail(
      name: String!,
      email: String!,
      link: String!): Boolean!

    addInterest(
      nameInterest: [String!]
      ): interestf!
    deleteInterest(id: ID!): Interest
    updateInterest(
      id: ID!
      nameInterest: String!
      description: String!
      ): Interest
    addUserInterest(id:ID!,interestsToAdd: [InterestInput!]!): User!
      deleteUserInterest(id: ID!, interestId: ID!): User!

    
    addSkill(
      name: String!
      description: String!
    
    ): skill!

     updateSkill(
       id: ID!
       name: String!
       description: String!
     ): skill!
     deleteSkill(
      id: ID!
     ): skill!
    #  findUserByConfirmationCode(activationCode: String!):User!
     addUserSkill(id:ID!,skillsToAdd: [SkillInput!]!): User!
      deleteUserSkill(id: ID!, skillId: ID!): User!

      SignUPInGmail(
        username: String!
         first_name: String!
          last_name: String!
          email: String!
          provider: String!
          image: String
      ): Login!
  }



  input SkillInput {
  skill: ID,
  level: Int,
  verified: Boolean
}
  input InterestInput {
    interest: ID,
    level: Int,
    verified: Boolean
}


type Subscription {
  messageSent: Message
}