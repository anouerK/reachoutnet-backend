# extend schema @link(url: "https://specs.apollo.dev/federation/v2.0", import: ["@key"])
# @key(fields: "id")

type User  {
    id: ID!
    username: String!
    first_name: String!
    last_name: String!
    birthdate: String
    country: String
    email: String!
    permissions: Int!
    creation_date: String!
    last_login: String
    is_verified: Boolean!
    has_otp:Boolean!
    skills: [Skill]
    profile_picture: String
    activationCode: String!
  }

  type Follow {
  id: ID!
  followerId: ID!
  followerType: followTypeEnum!
  followingId: ID!
  followingType: followTypeEnum!
  createdAt: String!
}
type Otp {
    id: ID!
    userId: ID!
    base32: String 
    verified: Boolean!
    last_modified: String!
    enabled: Boolean!
}
  type Event{
    id:ID!
    name: String!
    description: String!
    start_date: String!
    end_date: String!
    location: String!
    attendees: [User]!
    created_by: User!
    last_modified: String!
    requests:[EventRequest]
  }
type EventRequest {
  id: ID!
  state: Int
}


  type Interest{
    id: ID!
    nameInterest: String!
    description: String!  
  }

  type interest {
  id: ID!
  interest: interest!
  level: Int!
  verified: Boolean!
  }

enum followTypeEnum  {
  users 
  associations
}

  type Login {
    user: User
    token: String
  }

  type Skill {
  id: ID!
  skill: skill!
  level: Int!
  verified: Boolean!
  }

  type skill{
    id: ID!
    name: String!
    description: String!

  }
  type generatedOtp {
    base32: String!
    otpauth_url: String!
  }


  type Association {
  id: ID!
  name: String!
  description: String!
  email: String!
  Creation_date: String
  updated_at: [String]
  verified: Boolean
  status: Int
  members: [AssociationMember]
  address: Address!
  phone: Int!
}

type Address {
  street: String!
  city: String!
  state: String!
  country: String!
  zip: String!
}

type AssociationMember {
  id: ID!
  permissions: Int

}



  type Query {
    associations: [Association]!
    association(id: ID!): Association!
    associationByName(name: String!): [Association]!
    findUser(value: String): [User]
    users: [User]!
    usersRecommendation(id: ID!): [User]
    user(id: ID!): User
    userProfile(id: ID!): User
    me: User
    getUserInfo: User
    follows(id: ID!): String
     followBacks: [User]!
     ThreefollowBacks: [User]!
     following: [User]!
     OnlyFollowedBythisUser: [User]!
     NotFollowing: [User]!
    follow(
      id2: ID!
    ): String!

    skillId(id: ID!): skill!
    skillName(name : String!): skill!
    skills: [skill]!
    findUserSkills(id: ID!): [Skill]!
    findUserOtp: Otp!
    events: [Event]
    event(id: ID!): Event
    checkRequest(id:ID!):Boolean!

    interestId(id: ID!): Interest!
    nameInterest(name : String!): Interest!
    interests: [Interest]!
    findUserInterests(id: ID!): [interest]!
  }

  input AddressInput {
  street: String!
  city: String!
  state: String!
  country: String!
  zip: String!
}
input UserInput{
  id: String!
}

input AssociationMemberInput {
  id: String!
  permissions: Int
}

  type Mutation {
  updateUserProfilePicture(picture:String!): User!
  addAssociation(
  name: String!
  description: String!
  email: String!
  members: [UserInput!]
  address: AddressInput!
  phone: Int!
):Association!

updateAssociation(
  id: ID!
  name: String!
  description: String!
  email: String!
  members: [UserInput!]
  address: AddressInput!
  phone: Int!
):Association!
deleteAssociation(id:ID!):Association!
verifyAssociation(id:ID!):Association!

addMember(
  id:ID!
users: [UserInput!]!
):Association!
removeMember(
associationId:ID!
memberId:ID!
):String

updateMemberPermissions(
  id:ID!
  memberId:ID!
  permissions: Int!
):String




    createEvent(
      name: String!
      description: String!
      start_date: String!
      end_date: String!
      location: String!
      attendees: [ID]
    ): Event!
   
    sendRequest(id:ID!):Event!
    acceptRequest(id:ID! userId:ID!):Event!
    refuseRequest(id:ID! userId:ID!):Event!
    cancelRequest(id:ID!):Event!


    RequestResetPassword(email: String!):Boolean!
    ResetPassword(password: String!,token: String!):Boolean!
    addFollow(
      followingId: ID!
      followingType: String!
    ): Follow!
    unFollow(followingId: ID!): Follow!
    addUser(
      username: String!
      first_name: String!
      last_name: String!
      age: Int!
      email: String!
      password: String!
      permissions: Int
      skills: [SkillInput]
    ): User!
     Signup(
      username: String!
      first_name: String!
      last_name: String!
      birthdate: String!
      country: String!
      email: String!
      password: String!
      skills: [SkillInput]
    ): User!
    updateUser(
      id: ID!
      username: String
      first_name: String
      last_name: String
      age: Int
      email: String
      password: String
      birthdate: String
      country: String
      skills: [SkillInput]
      permissions: Int
    ): User!

updatePersonal(
      username: String!
      first_name: String!
      last_name: String!
      birthdate: String!
      country: String!
    ): User!

    activate(activationCode:String!): User!
    deleteUser(id: ID!): User!
    login(email: String!, password: String!): Login!
    loginLinkedin(authorization: String!): Login!
    generateOtp:generatedOtp!
    verifyOtp(base32:String!,token:String!): Otp!
    validateOtp(token:String!): Otp!
    disableOtp(id:ID!): User!
    deleteOtp(id:ID!): User!

    sendEmail(
      name: String!,
      email: String!,
      link: String!): Boolean!

    addInterest(
      id: ID!
      nameInterest: String!
      description: String!
      ): Interest!
    deleteInterest(id: ID!): Interest
    updateInterest(
      id: ID!
      nameInterest: String!
      description: String!
      ): Interest
    addUserInterest(id:ID!,interestsToAdd: [InterestInput!]!): User!
      deleteUserInterest(id: ID!, interestId: ID!): User!

    
    addSkill(
      name: String!
      description: String!
    
    ): skill!

     updateSkill(
       id: ID!
       name: String!
       description: String!
     ): skill!
     deleteSkill(
      id: ID!
     ): skill!
    #  findUserByConfirmationCode(activationCode: String!):User!
     addUserSkill(id:ID!,skillsToAdd: [SkillInput!]!): User!
      deleteUserSkill(id: ID!, skillId: ID!): User!

      SignUPInGmail(
        username: String!
         first_name: String!
          last_name: String!
          email: String!
          provider: String!
          image: String
      ): Login!
  }

  input SkillInput {
  skill: ID,
  level: Int,
  verified: Boolean
}
  input InterestInput {
    interest: ID,
    level: Int,
    verified: Boolean
}


